---
- name: Step 00xxxxx post software
  hosts: bastions
  become: no
  gather_facts: False
  environment:
    KUBECONFIG: /home/{{ remote_user }}/{{ cluster_name }}/auth/kubeconfig
  tasks:
    - debug:
        msg: "Post-Software Steps starting"

    - name: Check if secret is present for registry (AWS)
      command: >-
        oc get secret -n openshift-image-registry image-registry-private-configuration-user
      failed_when: false
      changed_when: false
      register: _registrysecret

    - when: _registrysecret.rc != 0
      block:
        - name: Create secret if it doesn't exist
          environment:
            ACCESSKEY: "{{ hostvars.localhost.student_access_key_id }}"
            SECRETKEY: "{{ hostvars.localhost.student_secret_access_key }}"
          shell: >-
            oc create secret generic
            image-registry-private-configuration-user
            -n openshift-image-registry
            --from-literal=REGISTRY_STORAGE_S3_ACCESSKEY=${ACCESSKEY}
            --from-literal=REGISTRY_STORAGE_S3_SECRETKEY=${SECRETKEY}

        - name: Update region in registry config
          command: >-
            oc patch config instance -n openshift-image-registry
            --type merge --patch
            '{"spec": { "storage": { "s3": { "region":"{{ aws_region_final | d(aws_region) }}"}}}}'

- name: Configure Bastion for CF integration
  hosts: bastions
  become: yes
  gather_facts: False
  tags:
  - env-specific
  - cf_integration
  - opentlc_integration
  tasks:
  - when: install_opentlc_integration|bool
    block:
      - name: Include mgr_users vars
        include_vars:
          file: mgr_users.yml

      - name: Configure Bastion
        include_role:
          name: opentlc-integration
        vars:
          no_log: yes

      - name: Create .kube for opentlc-mgr user
        file:
          path: /home/opentlc-mgr/.kube
          state: directory
          owner: opentlc-mgr
          group: opentlc-mgr

      - name: Copy /home/{{ remote_user }}/{{ cluster_name }}/auth/kubeconfig to ~opentlc-mgr
        copy:
          src: /home/{{ remote_user }}/{{ cluster_name }}/auth/kubeconfig
          dest: /home/opentlc-mgr/.kube/config
          remote_src: yes
          owner: opentlc-mgr
          group: opentlc-mgr
          mode: 0600

- name: PostSoftware flight-check
  hosts: bastions
  run_once: yes
  gather_facts: false
  become: false
  tags:
  - post_flight_check
  tasks:
    - when: install_ocp4 | bool
      environment:
        KUBECONFIG: "{{ cluster_name }}/auth/kubeconfig"
      ignore_errors: yes
      block:
        - name: Check DNS webconsole
          command: nslookup "{{ webconsole | urlsplit('hostname') }}"
          register: checkdnswebconsole
          changed_when: false
          retries: 15
          until: checkdnswebconsole is succeeded
          delay: 30

        - name: Check DNS API
          command: nslookup "{{ showserver.stdout | trim | urlsplit('hostname') }}"
          register: checkdnsapi
          changed_when: false

        - name: Webconsole
          uri:
            url: "{{ webconsole }}"
            validate_certs: no
          register: testwebconsole
          retries: 5
          until: testwebconsole is succeeded
          delay: 60

        - name: Cluster-info
          command: oc cluster-info
          register: clusterinfor
          changed_when: false

        - name: Create project
          command: oc new-project postflightcheck
          register: newproject

        - name: New-app
          command: oc new-app cakephp-mysql-persistent -n postflightcheck
          register: newapp

        - name: Wait for mysql
          command: timeout 300 oc rollout status dc/mysql -w -n postflightcheck
          register: mysqlw
          changed_when: false

        - name: Wait for php
          command: timeout 300 oc rollout status dc/cakephp-mysql-persistent -w -n postflightcheck
          register: phpw
          changed_when: false

        - name: Get route
          command: >-
            oc get route
            -l template=cakephp-mysql-persistent
            --no-headers
            -o json
            -n postflightcheck
          register: getroute
          changed_when: false

        - name: Test that route is reachable
          uri:
            url: "http://{{ getroute.stdout|from_json|json_query('items[0].spec.host') }}"
          register: testroute

        - name: Delete project
          command: oc delete project postflightcheck

        - debug:
            msg: "{{ item }}"
          loop:
            - "user.info: "
            - "user.info: Post Flight Check"
            - "user.info: DNS Web Console ............... {{ 'OK' if checkdnswebconsole.rc == 0 else 'FAIL' }}"
            - "user.info: DNS API ....................... {{ 'OK' if checkdnsapi.rc == 0 else 'FAIL' }}"
            - "user.info: Web console ................... {{ 'OK' if testwebconsole is succeeded else 'FAIL' }}"
            - "user.info: API ........................... {{ 'OK' if clusterinfor.rc == 0 else 'FAIL' }}"
            - "user.info: Create Project with PV ........ {{ 'OK' if newproject.rc == 0 else 'FAIL' }}"
            - "user.info: App deployed .................. {{ 'OK' if phpw.rc == 0 and mysqlw.rc == 0 else 'FAIL' }}"
            - "user.info: Route ......................... {{ 'OK' if testroute is succeeded else 'FAIL' }}"

    # Always succeed deployment regardless of the result of the tests. (This is preview software)
    - debug:
        msg: "Post-Software checks completed successfully"
