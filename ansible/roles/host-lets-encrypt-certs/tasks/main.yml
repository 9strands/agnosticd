---
## Request Let's Encrypt Certificates for a host

- name: Verify if AWS Credentials provided if required
  fail:
    msg: AWS Credentials are required when requesting certificates for a wildcard domain
  when:
    - acme_wildcard_domain|length|int>0
    - (acme_aws_access_key is not defined or acme_aws_access_key|trim == "" or acme_aws_secret_access_key is not defined or acme_aws_secret_access_key|trim == "") 

- name: Set acme_wildcard_certs fact
  set_fact:
    acme_wildcard_certs: "{{ (acme_wildcard_domain|length|int>0)|ternary('true','false') }}"

- name: Test if Let's Encrypt Certificates are already there
  stat:
    path: "{{ acme_remote_dir }}/lets-encrypt-x3-cross-signed.pem"
  register: cacert

- name: Let's Encrypt Certificates
  block:
    # Get Intermediary CA Certificate.
    # This is also used in the SSO configuration!
    - name: Get Let's Encrypt Intermediary CA Certificate
      get_url:
        url: https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem.txt
        dest: "{{ acme_remote_dir }}/lets-encrypt-x3-cross-signed.pem"

    - name: Check if locally cached Certificate exists
      become: False
      stat:
        path: "{{ acme_local_cache_cert_file }}"
      delegate_to: localhost
      register: local_cert_file

    - name: Check if locally cached Key exists
      become: False
      stat:
        path: "{{ acme_local_cache_key_file }}"
      delegate_to: localhost
      register: local_key_file

    - name: Check if locally cached CA cert
      become: False
      stat:
        path: "{{ acme_local_cache_ca_file }}"
      delegate_to: localhost
      register: local_ca_file

    - name: Copy local certificates to remote host
      block:
      - name: Ensure .acme.sh directory is on the host
        file:
          state: directory
          name: "{{ acme_remote_dir }}/.acme.sh/{{ acme_domain }}"
      - name: Copy all locally cached files to remote host
        copy:
          src: "{{ item.src }}"
          dest: "{{ item.dest }}"
        with_items:
        - { src: "{{ acme_local_cache_cert_file }}", dest: "{{ acme_remote_dir }}/.acme.sh/{{ acme_domain }}/{{ acme_domain }}.cer" }
        - { src: "{{ acme_local_cache_key_file }}", dest: "{{ acme_remote_dir }}/.acme.sh/{{ acme_domain }}/{{ acme_domain }}.key" }
        - { src: "{{ acme_local_cache_ca_file }}", dest: "{{ acme_remote_dir }}/.acme.sh/{{ acme_domain }}/ca.cer" }
      when:
      - local_cert_file.stat.exists|bool
      - local_key_file.stat.exists|bool
      - local_ca_file.stat.exists|bool
      - not acme_force_issue|d(False)|bool

    - name: Request Certificates (local cache miss)
      block:
      - name: Ensure git is installed
        yum:
          name: git
          state: latest
      - name: Remove Acme.sh directories if present
        file:
          name: "{{ item }}"
          state: absent
        with_items:
        - "{{ acme_remote_dir }}/acme.sh"
        - "{{ acme_remote_dir }}/.acme.sh"
      - name: Clone Let's Encrypt Acme.sh Repository
        git:
          repo: https://github.com/Neilpang/acme.sh.git
          clone: yes
          dest: "{{ acme_remote_dir }}/acme.sh"

      - name: Add AWS Access Key to Let's Encrypt Acme.sh configuration
        lineinfile:
          path: "{{ acme_remote_dir }}/acme.sh/dnsapi/dns_aws.sh"
          line: "AWS_ACCESS_KEY_ID={{ acme_aws_access_key }}"
          state: present
          insertbefore: '^#AWS_ACCESS_KEY_ID'
        when:
          - acme_wildcard_certs|d(False)|bool

      - name: Add AWS Secret Access Key to Let's Encrypt Acme.sh configuration
        lineinfile:
          path: "{{ acme_remote_dir }}/acme.sh/dnsapi/dns_aws.sh"
          line: "AWS_SECRET_ACCESS_KEY={{ acme_aws_secret_access_key }}"
          state: present
          insertbefore: '^#AWS_SECRET_ACCESS_KEY'
        when:
          - acme_wildcard_certs|d(False)|bool

      - name: Print Shell Command
        debug:
          msg: "{{ acme_remote_dir }}/acme.sh/acme.sh {{ (acme_production|bool)|ternary('','--staging') }} {{ acme_additional_args|d('') }} --issue -d {{ acme_domain }} {{ (acme_wildcard_domain|length>0)|ternary('-d','')}} {{ (acme_wildcard_domain|length>0)|ternary(acme_wildcard_domain,'')}} {{ (acme_wildcard_certs|bool)|ternary('--dns dns_aws', '--standalone') }}"
      - name: Request API and Wildcard Certificates from Let's Encrypt
        shell: "{{ acme_remote_dir }}/acme.sh/acme.sh {{ (acme_production|bool)|ternary('','--staging') }} {{ acme_additional_args|d('') }} --issue -d {{ acme_domain }} {{ (acme_wildcard_domain|length>0)|ternary('-d','')}} {{ (acme_wildcard_domain|length>0)|ternary(acme_wildcard_domain,'')}} {{ (acme_wildcard_certs|bool)|ternary('--dns dns_aws', '--standalone') }}"
        args:
          chdir: "{{ acme_remote_dir }}/acme.sh"

      - name: Save certificate to local cache
        fetch:
          src: "{{ acme_remote_dir }}/.acme.sh/{{ acme_domain }}/{{ acme_domain }}.cer"
          dest: "{{ acme_local_cache_cert_file }}"
          flat: true
        when:
          - acme_local_cache_cert_file is defined and acme_local_cache_cert_file|trim != ""

      - name: Save key to local cache
        fetch:
          src: "{{ acme_remote_dir }}/.acme.sh/{{ acme_domain }}/{{ acme_domain }}.key"
          dest: "{{ acme_local_cache_key_file }}"
          flat: true
        when:
          - acme_local_cache_key_file is defined and acme_local_cache_key_file|trim != ""
      - name: Save CA cert to local cache
        fetch:
          src: "{{ acme_remote_dir }}/.acme.sh/{{ acme_domain }}/ca.cer"
          dest: "{{ acme_local_cache_ca_file }}"
          flat: true
        when:
          - acme_local_cache_ca_file is defined and acme_local_cache_ca_file|trim != ""

      when:
        - local_cert_file.stat.exists|bool == false or local_key_file.stat.exists|bool == false or local_ca_file.stat.exists|bool == false or acme_force_issue|d(False)|bool
  when:
    - cacert.stat.exists|bool == false or acme_force_issue|d(False)|bool

- name: Install Automatic renewals of Certificates
  block:
  - name: Install crontab to renew certificates when they expire
    cron:
      name: LETS_ENCRYPT_RENEW
      special_time: daily
      job: "/root/acme.sh/acme.sh {{ acme_args|d('') }} --cron --home /root/.acme.sh > /dev/null"

  - name: Install deploy_LE_certs.yml playbook
    copy:
      src: deploy_LE_certs.yml
      dest: /root/deploy_LE_certs.yml
  when:
  - acme_renew_automatically|d(False)|bool
