---
- name: Terraform | Step 001 Deploy Infrastructure
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  vars_files:
    - "{{ ANSIBLE_REPO_PATH }}/configs/{{ env_type }}/env_vars.yml"
    - "{{ ANSIBLE_REPO_PATH }}/configs/{{ env_type }}/env_secret_vars.yml"
  tags:
    - step001
    - deploy_infrastructure
  tasks:
  - name: Terraform | Check if Terraform is installed
    command: terraform version
    register: terraform_check
    tags:
      - step001

  - name: Terraform | Install Terraform 
    fail:
      msg: "You need to install Terraform"
    when: terraform_check.stdout.find('is not installed') != -1
    tags:
      - step001

  - name: Terraform | Generate Terraform build file
    template:
      dest: "{{ANSIBLE_REPO_PATH}}/workdir/{{ env_type }}.{{ guid }}.{{cloud_provider}}.tf"
      src:  "{{ANSIBLE_REPO_PATH}}/configs/{{ env_type }}/files/cloud_providers/{{cloud_provider}}_cloud_template.tf.j2"
    tags:
      - step001
  
  - name: Terraform | Generate Terraform secrets file
    template: 
      dest: "{{ANSIBLE_REPO_PATH}}/workdir/terraform.tfvars"
      src:  "{{ANSIBLE_REPO_PATH}}/configs/{{ env_type }}/files/cloud_providers/{{cloud_provider}}_cloud_template.tfvars.j2"
    tags:
      - step001
  
  - name: Terraform | Run Terraform
    shell: cd {{ANSIBLE_REPO_PATH}}/workdir ; terraform init ; terraform apply chdir="{{ terraform_working_dir }}/{{ workshop_prefix }}" --confirm
    tags:
      - step001
  
  - name: Terraform | Wait for AWS AMIs to become initialized 
    pause: minutes=2
    tags:
      - step001
  